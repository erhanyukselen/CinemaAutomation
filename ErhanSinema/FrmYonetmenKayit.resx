<?xml version="1.0" encoding="utf-8"?>
<root>
  <!-- 
    Microsoft ResX Schema 
    
    Version 2.0
    
    The primary goals of this format is to allow a simple XML format 
    that is mostly human readable. The generation and parsing of the 
    various data types are done through the TypeConverter classes 
    associated with the data types.
    
    Example:
    
    ... ado.net/XML headers & schema ...
    <resheader name="resmimetype">text/microsoft-resx</resheader>
    <resheader name="version">2.0</resheader>
    <resheader name="reader">System.Resources.ResXResourceReader, System.Windows.Forms, ...</resheader>
    <resheader name="writer">System.Resources.ResXResourceWriter, System.Windows.Forms, ...</resheader>
    <data name="Name1"><value>this is my long string</value><comment>this is a comment</comment></data>
    <data name="Color1" type="System.Drawing.Color, System.Drawing">Blue</data>
    <data name="Bitmap1" mimetype="application/x-microsoft.net.object.binary.base64">
        <value>[base64 mime encoded serialized .NET Framework object]</value>
    </data>
    <data name="Icon1" type="System.Drawing.Icon, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
        <value>[base64 mime encoded string representing a byte array form of the .NET Framework object]</value>
        <comment>This is a comment</comment>
    </data>
                
    There are any number of "resheader" rows that contain simple 
    name/value pairs.
    
    Each data row contains a name, and value. The row also contains a 
    type or mimetype. Type corresponds to a .NET class that support 
    text/value conversion through the TypeConverter architecture. 
    Classes that don't support this are serialized and stored with the 
    mimetype set.
    
    The mimetype is used for serialized objects, and tells the 
    ResXResourceReader how to depersist the object. This is currently not 
    extensible. For a given mimetype the value must be set accordingly:
    
    Note - application/x-microsoft.net.object.binary.base64 is the format 
    that the ResXResourceWriter will generate, however the reader can 
    read any of the formats listed below.
    
    mimetype: application/x-microsoft.net.object.binary.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Binary.BinaryFormatter
            : and then encoded with base64 encoding.
    
    mimetype: application/x-microsoft.net.object.soap.base64
    value   : The object must be serialized with 
            : System.Runtime.Serialization.Formatters.Soap.SoapFormatter
            : and then encoded with base64 encoding.

    mimetype: application/x-microsoft.net.object.bytearray.base64
    value   : The object must be serialized into a byte array 
            : using a System.ComponentModel.TypeConverter
            : and then encoded with base64 encoding.
    -->
  <xsd:schema id="root" xmlns="" xmlns:xsd="http://www.w3.org/2001/XMLSchema" xmlns:msdata="urn:schemas-microsoft-com:xml-msdata">
    <xsd:import namespace="http://www.w3.org/XML/1998/namespace" />
    <xsd:element name="root" msdata:IsDataSet="true">
      <xsd:complexType>
        <xsd:choice maxOccurs="unbounded">
          <xsd:element name="metadata">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" />
              </xsd:sequence>
              <xsd:attribute name="name" use="required" type="xsd:string" />
              <xsd:attribute name="type" type="xsd:string" />
              <xsd:attribute name="mimetype" type="xsd:string" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="assembly">
            <xsd:complexType>
              <xsd:attribute name="alias" type="xsd:string" />
              <xsd:attribute name="name" type="xsd:string" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="data">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
                <xsd:element name="comment" type="xsd:string" minOccurs="0" msdata:Ordinal="2" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" msdata:Ordinal="1" />
              <xsd:attribute name="type" type="xsd:string" msdata:Ordinal="3" />
              <xsd:attribute name="mimetype" type="xsd:string" msdata:Ordinal="4" />
              <xsd:attribute ref="xml:space" />
            </xsd:complexType>
          </xsd:element>
          <xsd:element name="resheader">
            <xsd:complexType>
              <xsd:sequence>
                <xsd:element name="value" type="xsd:string" minOccurs="0" msdata:Ordinal="1" />
              </xsd:sequence>
              <xsd:attribute name="name" type="xsd:string" use="required" />
            </xsd:complexType>
          </xsd:element>
        </xsd:choice>
      </xsd:complexType>
    </xsd:element>
  </xsd:schema>
  <resheader name="resmimetype">
    <value>text/microsoft-resx</value>
  </resheader>
  <resheader name="version">
    <value>2.0</value>
  </resheader>
  <resheader name="reader">
    <value>System.Resources.ResXResourceReader, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <resheader name="writer">
    <value>System.Resources.ResXResourceWriter, System.Windows.Forms, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b77a5c561934e089</value>
  </resheader>
  <assembly alias="System.Drawing" name="System.Drawing, Version=4.0.0.0, Culture=neutral, PublicKeyToken=b03f5f7f11d50a3a" />
  <data name="pbPhoto.Image" type="System.Drawing.Bitmap, System.Drawing" mimetype="application/x-microsoft.net.object.bytearray.base64">
    <value>
        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
        RK5CYII=
</value>
  </data>
</root>